//
//  DisplayFlashCardInteractor.swift
//  CleanQuiz
//
//  Created by Rod Schmidt on 1/1/17.
//  Copyright (c) 2017 infiniteNIL. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol DisplayFlashCardInteractorInput
{
    func fetchFlashCards(request: DisplayFlashCard.Request.FetchFlashCards)
    func fetchNextFlashCard(request: DisplayFlashCard.Request.FetchNextFlashCard)
}

protocol DisplayFlashCardInteractorOutput
{
    func presentFlashCard(response: DisplayFlashCard.Response.FetchFlashCard)
    func presentError(_ error: FlashCardsStoreError)
}

class DisplayFlashCardInteractor: DisplayFlashCardInteractorInput
{
    var output: DisplayFlashCardInteractorOutput!
    var worker = DisplayFlashCardWorker(cardsStore: FlashCardsMemStore())

    private var flashCards: [FlashCard] = [] {
        didSet {
            if flashCards.count > 0 {
                cardIndex = 0
            }
            else {
                cardIndex = nil
            }
        }
    }
    private var cardIndex: Int?


    // MARK: - Business logic

    func fetchFlashCards(request: DisplayFlashCard.Request.FetchFlashCards)
    {
        // NOTE: Create some Worker to do the work

        worker.fetchFlashCards { (result: FlashCardsStoreResult) in
            DispatchQueue.main.async {
                switch result {
                    case .cards(let cards):
                        self.flashCards = cards
                        guard let card = self.currentCard else { return }
                        let response = DisplayFlashCard.Response.FetchFlashCard(card: self.hideAnswer(card: card),
                                                                                isLastCard: self.onLastCard(),
                                                                                isAnswerHidden: true)
                        self.output.presentFlashCard(response: response)

                    case .error(let error):
                        self.output.presentError(error)
                }
            }
        }
    }

    // Create a card with a blank answer so we don't reveal it yet
    private func hideAnswer(card: FlashCard) -> FlashCard
    {
        return FlashCard(question: card.question, answer: "???")
    }

    func fetchNextFlashCard(request: DisplayFlashCard.Request.FetchNextFlashCard)
    {
        guard let card = nextCard() else { return }
        let response = DisplayFlashCard.Response.FetchFlashCard(card: hideAnswer(card: card),
                                                                isLastCard: onLastCard(),
                                                                isAnswerHidden: true)
        output.presentFlashCard(response: response)
    }

    func revealAnswer(request: DisplayFlashCard.Request.RevealAnswer)
    {
        guard let card = currentCard else { return }
        let response = DisplayFlashCard.Response.FetchFlashCard(card: card,
                                                                isLastCard: onLastCard(),
                                                                isAnswerHidden: false)
        output.presentFlashCard(response: response)
    }

    private var currentCard: FlashCard?
    {
        guard let index = cardIndex, index < flashCards.count else { return nil }
        return flashCards[index]
    }

    private func nextCard() -> FlashCard? {
        guard let index = cardIndex, index + 1 < flashCards.count else { return nil }
        cardIndex = index + 1
        return currentCard
    }

    private func onLastCard() -> Bool {
        guard let index = cardIndex else { return true }
        return index == flashCards.count - 1
    }
    
}
