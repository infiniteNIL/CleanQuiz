//
//  DisplayFlashCardViewController.swift
//  CleanQuiz
//
//  Created by Rod Schmidt on 1/1/17.
//  Copyright (c) 2017 infiniteNIL. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol DisplayFlashCardViewControllerInput
{
    func displayFlashCard(viewModel: DisplayFlashCard.ViewModel)
    func displayError(title: String, message: String)
}

protocol DisplayFlashCardViewControllerOutput
{
    func fetchFlashCards(request: DisplayFlashCard.Request.FetchFlashCards)
    func fetchNextFlashCard(request: DisplayFlashCard.Request.FetchNextFlashCard)
    func revealAnswer(request: DisplayFlashCard.Request.RevealAnswer)
}

class DisplayFlashCardViewController: UIViewController, DisplayFlashCardViewControllerInput
{
    var output: DisplayFlashCardViewControllerOutput!
    var router: DisplayFlashCardRouter!

    @IBOutlet weak var questionLabel: UILabel!
    @IBOutlet weak var nextQuestionButton: UIButton!
    @IBOutlet weak var answerLabel: UILabel!
    @IBOutlet weak var revealAnswerButton: UIButton!

    // MARK: - Object lifecycle

    override func awakeFromNib()
    {
        super.awakeFromNib()
        DisplayFlashCardConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchFlashCardOnLoad()
    }

    // MARK: - Event handling

    private func fetchFlashCardOnLoad()
    {
        // NOTE: Ask the Interactor to do some work

        let request = DisplayFlashCard.Request.FetchFlashCards()
        output.fetchFlashCards(request: request)
    }

    // MARK: - Display logic

    func displayFlashCard(viewModel: DisplayFlashCard.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        questionLabel.text = viewModel.questionText
        nextQuestionButton.isEnabled = viewModel.nextQuestionEnabled

        answerLabel.text = viewModel.answerText
        revealAnswerButton.isEnabled = viewModel.revealAnswerEnabled
    }

    func displayError(title: String, message: String)
    {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "OK button title in error alert"),
                                      style: .default))
        present(alert, animated: true)
    }

    @IBAction func nextQuestion()
    {
        let request = DisplayFlashCard.Request.FetchNextFlashCard()
        output.fetchNextFlashCard(request: request)
    }

    @IBAction func revealAnswer()
    {
        let request = DisplayFlashCard.Request.RevealAnswer()
        output.revealAnswer(request: request)
    }
    
}
